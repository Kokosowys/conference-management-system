1. Wymagania dotyczące terminu

Musimy się zadeklarować ile przypadków użycia:
* Rejestracja
* Dodawanie Scientific paper

continous Integration (np. Jenkins); testy jednostkowe

Prezentacja - pokazanie jak działa po implementacji.

Raport z testów funkcjonalnych i jednostkowych.
* Testy funkcje funkcjonalne (do przeklikania)
* Przygotować zbiór test plan'ów
* Opisać przypadki testowe np. krańcowe 'brak danych', 'dużo znaków' - sprawdzanie validacji
* SAWUI?

2. Przypadek Rejestracji Użytkownika - część backend

2.1 Wystawione REST API:
Dane wymiane są w formacie JSON.

* /api/people [POST]
** name - string (required)
** surname - string (not required, null by default)
** sex - string (not required, null by default)
** age - integer (not required, null by default)
** academicDegree: {BSc, MSc, PhD, MD} - string (not required, null by default)
** password - string (required)
** <return>: json({name - string, personId - int})
** Przykładowe wywołanie:
	curl -i -X POST -H "Content-Type: application/json" -d '{"name":"miguel","password":"python"}' http://127.0.0.1:5000/api/people


* /api/people [GET]
** <precondition>
*** Basic Auth required
** <return format>: json({personId - int, name - string, surname - string})
** Przykładowe wywołanie:
	curl -u miguel:python  -X  GET http://127.0.0.1:5000/api/people


* /api/people/<int:id> [GET]
** <precondition>
*** Basic Auth required
** <return format>: json({personId - int, name - string, surname - string, sex - string, age - integer, academicDegree - string})
** Przykładowe wywołanie:
	curl -u miguel:python  -X  GET http://127.0.0.1:5000/api/people/1


* /api/token/validate [GET]
** <args>
*** token - string (path argument)
** <return format>
*** json('tokenValidation' - boolean, 'personId' - int)
** <return conditions>
*** if tokenValidation == True:
**** status 200
**** 'tokenValidation' : True
**** 'personId' : int >= 0
*** if tokenValidation ==False
**** status 403
**** 'tokenValidation': False
**** 'personId': -1
** Przykładowe wywołanie:
	curl http://127.0.0.1:5000/api/token/validate?token=eyJhbGciOiJIUzI1NiIsImV4cCI6MTQ5NzEwMTc2MSwiaWF0IjoxNDk3MTAxMTYxfQ.eyJpZCI6MX0.HaAabLp2iOdsEiAeoBX0wltdUqznXfdD6-BO-qHLoIA


* /api/token/generate [GET]
** <precondition>
*** Basic Auth required
** <return>: json('token' - string, 'duration' - int, 'personId' - int)
** Przykładowe wywołanie:
	curl -u miguel:python -X  GET http://127.0.0.1:5000/api/token/generate


* /api/resource
** <precondition>
*** Basic Auth required
** <return format> testing response - string

2.2 Funkcje:
* dodawanie nowego użytkownika do bazy danych
* generowanie czasowego identyfikatora sesji
* autentykacja użytkownika na podstawie loginu i hasła
* autentykacja użytkownika na podstawie identyfikatora sesji

2.3 Role Based Security
Prototypowa aplikacja zakłada, że użytkownicy mogą posiadać dwie role: {user, author}. Rola 'user' jest nadawana każdemu zarejestrowanemu użytkownikowi. Rola 'author' jest nadawana użytkownikowi, który zgłosił artykuł naukowy.

W celu implementacji zabezpieczenia na bazie ról, rozwarzany był standardowy wzorzec do kontroli dostępu 'Role Based Security'. W aplikacji zostałaby zaimplementowana okrojona wersja wzorca, operująca na dwóch klasach: User, Role, przy czym klasy User i Role związane są relacjami wiele do wielu za pośrednictwem klasy 'Role Member'.

Ze względu na to, że aplikacja w podstawowej wersji będzie zawierała tylko dwie role, a pełna, docelowa aplikacja, nie więcej niż pięć dlatego w części backendowej zaimplementowane zostało rozwiązanie oparte o rozszerzenie do Frameworku używanego do budowania REST api. Rozszerzenie nazwya się 'Flask-Principal'. Poszczególne zasoby kontrolowane są ze względu na role przypisane do użytkowników. Role definiowane są jako zbiory uprawnień.

W aplikacji prototypowej zdefiniowano dwie role: {user, author}. Role posiadają następujące uprawnienia:
* user
** dodawanie article
* author
** przeglądanie swoich artykułów
** dowanie załączników do swoich artykułów

3. Przypadek dodawania papieru naukowego (Scientific Paper)

3.1 Wystawione REST API:
* /api/articles [POST]
** <precondition>
*** Basic Auth required
** <post format> json
*** name - string (required)
*** theme - string (not required, null by default)
*** label - string (not required, null by default)
*** description - string (not required, null by default)
*** text - string (not required, null by default)
** <return format>: json({articleId - int, name - string})
** Przykładowe wywołanie:
	curl -u miguel:python -i -X POST -H "Content-Type: application/json" -d '{"name":"article_name"}' http://127.0.0.1:5000/api/articles


* /api/articles/<articleId:Int> [GET]
** <precondition>
*** Basic Auth required
*** userId of article must match userId of logged user
** <return format>: json({articleId - int, name - string, theme - string, label - string, description - string, text - string, attachments: [attachmentId - int, name - string]} of given article)
* Przykładowe wywołanie:
	curl -u miguel:python -i -X GET http://127.0.0.1:5000/api/articles/1


* /api/articles/author/<personId:Int> [GET]
** <precondition>
*** Basic Auth required
*** userId must match userdId of logged user
** <return format>: json ([{articleId - int, name - string}, ... of articles assigned to given user])
** Przykładowe wywołanie:
	curl -u miguel:python -X  GET http://127.0.0.1:5000/api/articles/author/1


* /api/articles/<articleId:Int>/attachments [POST]
** <precondition>
*** Basic Auth required
*** userId of article (by articleId) must match userId of logged user
** <post format>
*** file - (link to resource on posting machine)
** <return format>:  json({attachmentId - int, name - string})
** Przykładowe wywołanie:
	curl -u miguel:python -i -X POST -F 'file=@/tmp/example.pdf' http://127.0.0.1:5000/api/articles/1/attachments


* /api/articles/attachments/<attachmentId:Int> [GET]
** <precondition>
*** Basic Auth required
*** userId of article must match userId of logged user
** <return>: FILE (redirect to static file)
** Przykładowe wywołanie:
	 curl -u miguel:python -X  GET http://127.0.0.1:5000/api/articles/attachments/1



3.2 Funkcja:
* dodawanie nowego scientific paper
* pobieranie listy scientific paper(*) dla zalogowanego uzytkownika
* pobieranie dokumentu cyfrowego
* pobieranie dokumentu - informacje o scientific paper

(*) wynik w kontekście zalogowanego użytkownika; autentykacja na poziomie uprawnień dla pojedynczej roli ('zalogowany'). Brak roli 'Administrator'


4. Walidacja pól w otrzymywanych danych
Dane dotyczące rejestrowanego użytkownika, artykułu i załącznika są sprawdzane pod kątem długości znaków oraz pod kątęm zgodności z rozszerzeniem (w ostatnim przypadku). Poniżej znajduje się zestawienie ogranieczeń jakie muszą spełniać przesyłane dane. Uwaga - podane dane opisują DOPUSZCZALNE wartości graniczne. Błąd pojawia się dopiero po przekroczeniu dopuszczalnych wartości.

4.1 Person
    'nameMinLen':3, *REQUIRED*
    'nameMaxLen':25,
    'surnameMinLen':3, *If applied*
    'surnameMaxLen':25,
    'passwordMinLen':6, *REQUIRED*
    'passwordMaxLen':32,
    'sexMinLen':1, *If applied*
    'sexMaxLen':10,
    'ageMin':18, *If applied*
    'ageMax':100,
    'academicDegreeMinLen':1, *If applied*
    'academicDegreeMaxLen':8

4.2 Article
    'nameMinLen':3, *REQUIRED*
    'nameMaxLen':25,
    'themeMinLen':3, *If applied*
    'themeMaxLen':25,
    'labelMinLen':3, *If applied*
    'labelMaxLen':32,
    'descriptionMaxLen':500,
    'textMaxLen':10000

4.3 Attachment
Allowed extentions:
	'txt'
	'pdf'
	'png'
	'jpg'
	'jpeg'
	'gif'


REST Api TODO:
* Zarządzanie rolami - wprowadznie ograniczenia dla roli Author, zmiana ról


Notes:
[Designing REST with Flask] http://stackoverflow.com/questions/21634682/proper-way-for-user-authentication-with-angularjs-and-flask
[Role Based Security] https://stackoverflow.com/questions/13102872/better-way-to-represent-user-roles-in-database
[Flask auth] http://flask.pocoo.org/snippets/8/
[Flask auth] http://flask.pocoo.org/snippets/98/
[Flask principal] https://pythonhosted.org/Flask-Principal/
[Flask principal issues] http://stackoverflow.com/questions/7050137/flask-principal-tutorial-auth-authr
[Flask principal example] http://terse-words.blogspot.com/2011/06/flask-extensions-for-authorization-with.html
[Flask principal example] https://github.com/mickey06/Flask-principal-example
[Flask principal DOC - view more articles, edit for author only; s.13] https://media.readthedocs.org/pdf/flask-principal-cn/stable/flask-principal-cn.pdf
[Secure REST transactions] http://stackoverflow.com/questions/29210768/how-to-send-credentials-over-http-for-rest-api
[JSON Web Tokens] https://jwt.io/
[Authentication with tokens] https://templth.wordpress.com/2015/01/05/implementing-authentication-with-tokens-for-restful-applications/
[Angular.JS as clientside] http://stackoverflow.com/questions/22301920/is-angularjs-clientside-or-serverside-or-both
[Flask deploy] http://flask.pocoo.org/docs/0.12/deploying/mod_wsgi/
[Python ORM - sqlAlchemy] http://docs.sqlalchemy.org/en/latest/dialects/mysql.html
[Prostgresql Replication] https://www.digitalocean.com/community/tutorials/how-to-set-up-master-slave-replication-on-postgresql-on-an-ubuntu-12-04-vps
[PostgreSql Replication Type] https://www.postgresql.org/docs/9.0/static/different-replication-solutions.html
[SqlAlchemy vs Replication]http://stackoverflow.com/questions/42987544/how-do-i-work-with-a-postgresql-replication-setup-with-sqlalchemy
[Storing files in database discussion] https://softwareengineering.stackexchange.com/questions/150669/is-it-a-bad-practice-to-store-large-files-10-mb-in-a-database
[Downloading files from db issues] https://groups.google.com/forum/#!topic/sqlalchemy/0aS215S5BzI
[PostgreSql storing datafiles methods] https://wiki.postgresql.org/wiki/BinaryFilesInDB
[Flask mail support] https://pythonhosted.org/flask-mail/
[Flask mail confirmation] https://realpython.com/blog/python/handling-email-confirmation-in-flask/
[Flask mail example] https://www.tutorialspoint.com/flask/flask_mail.htm
[MVC, MVVC discussion] http://stackoverflow.com/questions/667781/what-is-the-difference-between-mvc-and-mvvm
[Business layer discussion] http://thedailywtf.com/articles/The-Mythical-Business-Layer
[Viewpoints] https://books.google.pl/books?id=ka4QO9kXQFUC&pg=PA271&lpg=PA271&dq=%22component+diagram%22+%22functional+viewpoint%22&source=bl&ots=ysUsZ4WOU3&sig=AOw7nCkKvAVF4y38pSv1Ot2JgOA&hl=pl&sa=X&ved=0ahUKEwiLk5OYnIHUAhUDuRQKHXIpDKEQ6AEIODAG#v=onepage&q=%22component%20diagram%22%20%22functional%20viewpoint%22&f=false
[Mail Transfer Agent instead full mail server] https://www.digitalocean.com/community/tutorials/why-you-may-not-want-to-run-your-own-mail-server
[REST Api in Flask unit testing]https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-vii-unit-testing
[Continous inegration and Flask] http://bango29.com/continuous-web-development/
[Jenkins installation] https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-16-04
